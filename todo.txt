25 kwietnia do godz. 18:00. 

Zadanie:
Pamietam jak jakieś 20 lat temu na Atari 65XE, moim uwczesnym komputerze zetknąłem się poraz pierwszy z programowaniem.
Był to wirtualny "żółw" (LOGO), który reagował na komendy wydawane z klawiatury rysując linie na ekranie. Proste, ale potężne narzędzie.

Waszym zadaniem będzie napisać prosty interpreter języka LOGO, bardzo uproszczony, który będzie reagował na 5 komend.

Program na wejściu powinien przyjmować jeden argument, wielkość planszy (n; n>1, nieparzyste).

np:

$ ruby logo.rb 11

. . . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . . .
. . . . . X . . . . .
. . . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . . .

Plansza powinna skladac sie z pustych pol w rozmarze nxn. Na srodku powinien znajdowac sie element poczatkowy, nasz "żółw".

Program powinien dzialac w nieskonczonej petli czekajac na komenty:

np:

. . . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . . .
. . . . . X . . . . .
. . . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . . .

Enter command: U 3

Możliwe komendy (wielkość liter nie ma znaczenia):

"U X" - do gory x pozycji
"D X" - w dol x pozycji
"R X" - w prawo x pozycji
"L X" - w lewo x pozycji
"Q" - wyjscie z programu. Koniec

np:

po komendzie U 3, stan powinien sie zmienic na

. . . . . . . . . . .
. . . . . . . . . . .
. . . . . X . . . . .
. . . . . X . . . . .
. . . . . X . . . . .
. . . . . X . . . . .
. . . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . . .
. . . . . . . . . . .

Enter command:

Program powinien być odporny na błędy wprowadzanych danych, walidować zakres
(nie powinien zezwalać wyjść poza plansze), ignorować złe komendy

Jeśli coś jest nie jasne, to piszcie śmiało z pytaniami :)

Jako rozwiązanie oczekuję:
- opisu podejścia do rozwiązania problemu
- kodu źródłowego
- opisu jak uruchomić napisany program
- dla chętnych (testy jednostkowe)

Zadanie należy wykonać samodzielnie. Rozwiązanie będzie oceniane pod względem poprawności, czytelności i wydajności.

- opisu podejścia do rozwiązania problemu
  1. Sprawdzenie danych wejściowych, (n; n>1, nieparzyste)
  2. Dodanie punktu środkowego do trasy (dotychczasowa trasa - trasa żółwia w tablicy współrzędnych),
  3. Wydruk planszy trasą
  4. Odczytanie z klawiatury komendy (walidacja składni - wyr. regularne), zakończenie jeśli "q" albo rozbicie na kierunek i długość kroku,
  5. Jeśli długość nie spowoduje wyjścia poza planszę - dodanie nowych punktów do trasy,
  do pkt. 3

- kodu źródłowego
  https://github.com/feleck/logo.git
- opisu jak uruchomić napisany program
  ruby logo.rb n gdzie n; n>1, nieparzyste
- dla chętnych (testy jednostkowe)


